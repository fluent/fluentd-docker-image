<% fluentd_ver = version.split("-").first[1..-1] %>
<% fluentd_tag = version.dup; fluentd_tag.slice!('-onbuild') %>
<% is_onbuild = (version.include?("onbuild")) %>
<% is_alpine = (dockerfile.split("/").last.split("-").first == "alpine") %>
<% is_debian = (dockerfile.split("/").last.split("-").first == "debian") %>
<% is_armhf = (dockerfile.split("/")[1] == "armhf") %>
<% is_arm64 = (dockerfile.split("/")[1] == "arm64") %>
<% is_windows = (dockerfile.split("/").last.split("-").first == "windows") %>
<% windows_ver = dockerfile.split("/").last.split("-").last %>
# AUTOMATICALLY GENERATED
# DO NOT EDIT THIS FILE DIRECTLY, USE /Dockerfile.template.erb

<% if is_windows %>
FROM mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-<%= windows_ver %>

<% else %>
<% if is_alpine %>
<% if is_armhf %>
FROM resin/armhf-alpine:3.7
<% else %>
FROM alpine:3.19
<% end %>
<% else %>
<% if is_armhf %>
# To set multiarch build for Docker hub automated build.
FROM golang:alpine AS builder
WORKDIR /go
ENV QEMU_DOWNLOAD_SHA256 47ae430b0e7c25e1bde290ac447a720e2ea6c6e78cd84e44847edda289e020a8
RUN apk add curl --no-cache
RUN curl -sL -o qemu-3.0.0+resin-arm.tar.gz https://github.com/balena-io/qemu/releases/download/v3.0.0%2Bresin/qemu-3.0.0+resin-arm.tar.gz && echo "$QEMU_DOWNLOAD_SHA256 *qemu-3.0.0+resin-arm.tar.gz" | sha256sum -c - | tar zxvf qemu-3.0.0+resin-arm.tar.gz -C . && mv qemu-3.0.0+resin-arm/qemu-arm-static .

FROM --platform=linux/arm/v7 arm32v7/ruby:3.4-slim
COPY --from=builder /go/qemu-arm-static /usr/bin/
<% elsif is_arm64 %>
# To set multiarch build for Docker hub automated build.
FROM golang:alpine AS builder
FROM --platform=linux/arm64 arm64v8/ruby:3.4-slim
<% else %>
FROM ruby:3.4-slim
<% end %>
<% end %>
<% end %>
LABEL maintainer "Fluentd developers <fluentd@googlegroups.com>"
LABEL Description="Fluentd docker image" Vendor="Fluent Organization" Version="<%= fluentd_ver %>"
<% if is_armhf %>
ARG CROSS_BUILD_START="cross-build-start"
ARG CROSS_BUILD_END="cross-build-end"
RUN [ ${CROSS_BUILD_START} ]
<% end %>

# Do not split this into multiple RUN!
# Docker creates a layer for every RUN-Statement
<% if is_windows %>
RUN powershell -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"

# NOTE: For avoiding stalling with docker build on windows, we must use latest version of msys2.
RUN choco install -y ruby --version 3.4.5.1 --params "'/InstallDir:C:\ruby34'" \
&& choco install -y msys2 --version 20250622.0.0 --params "'/NoPath /NoUpdate /InstallDir:C:\ruby34\msys64'"
RUN refreshenv \
&& ridk install 3 \
&& type "c:\ProgramData\gemrc" \
&& c:\ruby34\bin\ruby -r yaml -e "path = 'c:/ProgramData/gemrc'; yaml = YAML.safe_load(File.read(path)); yaml['install'] = '--no-document'; yaml['update'] = '--no-document'; File.write(path, YAML.dump(yaml))" \
&& type "c:\ProgramData\gemrc" \
&& gem install oj -v 3.16.11 \
&& gem install json -v 2.13.2 \
&& gem install rexml -v 3.4.1 \
&& gem install fluentd -v <%= fluentd_ver %> \
&& gem install win32-service -v 2.3.2 \
&& gem install win32-ipc -v 0.7.0 \
&& gem install win32-event -v 0.6.3 \
&& gem sources --clear-all

# Remove gem cache and chocolatey
RUN powershell -Command "Remove-Item -Force C:\ruby34\lib\ruby\gems\3.4.0\cache\*.gem; Remove-Item -Recurse -Force 'C:\ProgramData\chocolatey'"

COPY fluent.conf /fluent/conf/fluent.conf
<% else %>
<% if is_alpine %>
# therefore an 'apk delete' has no effect
RUN apk update \
 && apk add --no-cache \
        ca-certificates \
        ruby ruby-irb ruby-etc ruby-webrick \
        tini \
 && apk add --no-cache --virtual .build-deps \
        build-base linux-headers \
        ruby-dev gnupg \
<% else %>
# therefore an 'apt-get purge' has no effect
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
            ca-certificates tini \
 && buildDeps=" \
      make gcc g++ libc-dev \
      wget bzip2 gnupg dirmngr \
    " \
 && apt-get install -y --no-install-recommends $buildDeps \
<% end %>
 && echo 'gem: --no-document' >> /etc/gemrc \
 && export MAKEFLAGS=-j$(nproc) \
 && gem install oj -v 3.16.11 \
 && gem install json -v 2.13.2 \
 && gem install rexml -v 3.4.1 \
 && gem install async -v 2.24.0 \
 && gem install async-http -v 0.89.0 \
 && gem install fluentd -v <%= fluentd_ver %> \
 && unset MAKEFLAGS \
 && export GEM_DIR=$(ruby -e 'puts Gem.dir') \
 && echo GEM_DIR=$GEM_DIR \
 && rm -rf $GEM_DIR/cache/*.gem \
 # Don't purge $GEM_DIR/gems/GEM/lib/GEM/ext because it might contain runtime .so (e.g json)
 && find $GEM_DIR -maxdepth 3 -type d -name test -or -name ext -or -name spec -or -name benchmark | xargs -r rm -rfv \
 && find $GEM_DIR -name "*.so" | xargs -r strip \
<% if is_alpine %>
 && gem install bigdecimal -v 3.2.2 \
 && apk del .build-deps \
 && rm -rf /var/cache/apk/* \
<% else %>
 && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" \
 && wget -O /tmp/jemalloc-5.3.0.tar.bz2 https://github.com/jemalloc/jemalloc/releases/download/5.3.0/jemalloc-5.3.0.tar.bz2 \
 && cd /tmp && tar -xjf jemalloc-5.3.0.tar.bz2 --no-same-owner && cd jemalloc-5.3.0/ \
 # Don't use MADV_FREE to reduce memory usage and improve stability
 # https://github.com/fluent/fluentd-docker-image/pull/350
 && (echo "je_cv_madv_free=no" > config.cache) && ./configure -C && make \
 && mv lib/libjemalloc.so.2 /usr/lib \
 && apt-get purge -y --auto-remove \
                  -o APT::AutoRemove::RecommendsImportant=false \
                  $buildDeps \
                  '*-dev' \
 && rm -rf /var/lib/apt/lists/* \
<% end %>
 && rm -rf /tmp/* /var/tmp/*

<% if is_alpine %>
RUN addgroup -S fluent && adduser -S -G fluent fluent \
    # for log storage (maybe shared with host)
    && mkdir -p /fluentd/log \
    # configuration/plugins path (default: copied from .)
    && mkdir -p /fluentd/etc /fluentd/plugins \
    && chown -R fluent /fluentd && chgrp -R fluent /fluentd
<% else %>
RUN groupadd -r fluent && useradd -r -g fluent fluent \
    # for log storage (maybe shared with host)
    && mkdir -p /fluentd/log \
    # configuration/plugins path (default: copied from .)
    && mkdir -p /fluentd/etc /fluentd/plugins \
    && chown -R fluent /fluentd && chgrp -R fluent /fluentd
<% end %>


COPY fluent.conf /fluentd/etc/
COPY entrypoint.sh /bin/
<% end %>

<% if is_onbuild %>
ONBUILD COPY fluent.conf /fluentd/etc/
ONBUILD COPY plugins /fluentd/plugins/
<% end %>

ENV FLUENTD_CONF="fluent.conf"

<% if not is_windows %>
<% if is_alpine %>
ENV LD_PRELOAD=""
<% else %>
ENV LD_PRELOAD="/usr/lib/libjemalloc.so.2"
<% end %>
<% end %>
EXPOSE 24224 5140

<% if is_windows %>
ENTRYPOINT ["cmd", "/k", "fluentd", "--config", "C:\\fluent\\conf\\fluent.conf"]
<% else %>
USER fluent
ENTRYPOINT ["tini",  "--", "/bin/entrypoint.sh"]
CMD ["fluentd"]

<% if is_armhf %>
RUN [ ${CROSS_BUILD_END} ]
<% end %>
<% end %>
